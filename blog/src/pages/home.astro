---
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import FormattedDate from '../components/FormattedDate.astro';

const TITLE = "Home Page";
const DESCRIPTION = "Welcome to my Home Page";

---

<html lang="en">
	<head>
		<BaseHead title={TITLE} description={DESCRIPTION} />
	</head>

	<body>
		<div class="min-h-screen flex flex-col">
			<Header />
			<main class="max-w-4xl w-full mx-auto px-4 flex flex-col justify-around flex-1 mb-4">
				<div class="text-center">
					<h1 class="mb-0 leading-none">My Homepage</h1>
					<p id="last-command" class="text-rosePine-subtle font-mono">[]</p>
				</div>
				<div class="">
					<form id="search-form" class="mb-4">
						<input id="search-input" type="text" class="bg-rosePine-overlay w-full text-lg px-4 py-2 rounded-xl focus:ring-4 focus:ring-rosePine-iris outline-none" autocomplete="off" placeholder="Search...">
					</form>	
					<ul id="engine" class="flex justify-around list-none mb-16 flex-wrap"></ul>
				</div>
				<div id="links" class="flex flex-wrap justify-between gap-4"></div>
			</main>
		</div>
		<Footer />
		<script>
			const engines = [
				{ name: "DuckDuckGo", url: "https://duckduckgo.com/?q=" },
				{ name: "Google", url: "https://google.com/search?q=" },
				{ name: "YouTube", url: "https://youtube.com/results?search_query=" },
				{ name: "Nix Packages", url: "https://search.nixos.org/packages?type=packages&query=" },
				{ name: "Home Manager", url: "https://home-manager-options.extranix.com/?query=" },
			];

			let currentEngine = 0;
			const engineList = document.getElementById("engine");
			const searchInput = document.getElementById("search-input") as HTMLInputElement;
			const form = document.getElementById("search-form");

			const homeRow = new Set(["a", "s", "d", "f", "j", "k", "l", ";"]);
			let keyBuffer: string[] = [];
			const linkDiv = document.getElementById("links");

			const links = {
				s: {
					title: "Studies",
					links: {
						j: { name: "Canvas", url: "https://uia.instructure.com/" },
						k: { name: "Teams", url: "https://teams.microsoft.com/v2/" },
						l: { name: "Printer", url: "https://uiaprint.uia.no/" },
					}
				},
				d: {
					title: "Tools",
					links: {
						j: { name: "ChatGPT", url: "https://chatgpt.com/" },
						k: { name: "Speedtest", url: "https://www.speedtest.net/" },
					}
				},
				f: {
					title: "Work",
					links: {
						j: { name: "GitHub", url: "https://github.com/" },
						k: { name: "LinkedIn", url: "https://linkedin.com/" },
					}
				},
			};

			const lastCmd = document.getElementById("last-command");

			if (engineList && searchInput && form && linkDiv && lastCmd) {

				const liElements = engines.map((engine, index) => {
					const li = document.createElement("li");
					li.textContent = engine.name;
					li.className = "border-b-4 border-rosePine-pine border-hidden p-0 m-0 mb-2";
					if (index === currentEngine) {
						li.classList.remove("border-hidden", "text-rosePine-base");
						li.classList.add("text-rosePine-rose")
					}
					li.dataset.index = index.toString();
					engineList.appendChild(li);
					return li;
				});

				for (const [prefixKey, category] of Object.entries(links)) {
					
					const mainKey = document.createElement("span");
					mainKey.className = "font-mono";
					mainKey.textContent = `[${prefixKey}]`;

					const titleText = document.createElement("span");
					titleText.className = "";
					titleText.textContent = `${category.title}`;



					const title = document.createElement("h2");
					title.append(mainKey, titleText)
					title.className = "text-lg flex gap-2 mb-1";

					const hr = document.createElement("hr");
					hr.className = "mb-2";


					const categoryDiv = document.createElement("div");
					categoryDiv.className = "flex-1 bg-rosePine-overlay ring-rosePine-iris rounded-xl px-4 py-2";
					categoryDiv.id = `${prefixKey}-links`
					categoryDiv.appendChild(title);
					categoryDiv.appendChild(hr);


					const ul = document.createElement("ul");
					ul.className = "flex flex-col gap-1 mb-1";
					
					for (const [key, linkObj] of Object.entries(category.links)) {
						const li = document.createElement("li");
						const a = document.createElement("a");
						const span = document.createElement("span");

						span.textContent = `[${key}]`;
						span.className = "font-mono"

						a.href = linkObj.url;
						a.textContent = `${linkObj.name}`;

						li.className = "flex gap-2 m-0 p-0";

						li.append(span, a);
						ul.append(li);
					}
					categoryDiv.appendChild(ul);
					linkDiv.append(categoryDiv);

				}

				const updateList = () => {
					liElements.forEach((li, index) => {
						if (index === currentEngine) {
							li.classList.remove("border-hidden");
							li.classList.add("text-rosePine-rose")
						} else {
							li.classList.add("border-hidden");
							li.classList.remove("text-rosePine-rose")

						}
					});
				};

				const updateLastCmd = (combo) => {
					if (combo === "Shift" || combo === "Control" || combo === "Alt") return;
					if (combo === " ") combo = "Space";
					lastCmd.textContent = `[${combo}]`;
				};


				document.addEventListener("keydown", (e) => {
					if (!homeRow.has(e.key)) {
						keyBuffer = [];
					}

					document.querySelectorAll('#links div').forEach(div => {
						div.classList.remove("ring-4");
					});

					if (e.key === "Tab") {
						if (e.shiftKey) {
							currentEngine = (currentEngine - 1 + engines.length) % engines.length;
						} else {
							currentEngine = (currentEngine + 1) % engines.length;
						}
						e.preventDefault();
						updateList();
					}
					
					if (e.key === "Escape") {
						e.preventDefault();
						(document.activeElement as HTMLElement)?.blur?.();
						keyBuffer = [];
						updateLastCmd("Esc");
					}
					
					if (e.target instanceof HTMLElement && e.target.tagName !== "INPUT" && e.target.tagName !== "TEXTAREA") {
						updateLastCmd(e.key);

						if (e.key === "i") {
							e.preventDefault();
							searchInput.focus();
						}
						
						if (e.key === "c") {
							e.preventDefault();
							searchInput.value = "";
							searchInput.focus();
						}
						
						if (homeRow.has(e.key)) {
							if (links[e.key]) document.getElementById(`${e.key}-links`)?.classList.add("ring-4");
							keyBuffer.push(e.key);
							if (keyBuffer.length >= 2) {
								const [fst, snd] = keyBuffer;
								keyBuffer = [];
								if (links[fst] && links[fst].links[snd]) {
									const target = links[fst].links[snd];
									window.open(target.url, "_blank");
								} else {
									keyBuffer.push(snd);
								}

							} else {
								if (!links[e.key]) {
									keyBuffer = [];
								}
							}
						}
					}
				});

				document.addEventListener("submit", (e) => {
					e.preventDefault();
					const query = searchInput.value.trim();
					if (query) {
						window.open(engines[currentEngine].url + encodeURIComponent(query), "_blank");
					}
				});
			}
		</script>
	</body>
</html>
